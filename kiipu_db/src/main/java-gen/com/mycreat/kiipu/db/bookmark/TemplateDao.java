package com.mycreat.kiipu.db.bookmark;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mycreat.kiipu.db.bookmark.model.Template;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "template".
*/
public class TemplateDao extends AbstractDao<Template, Long> {

    public static final String TABLENAME = "template";

    /**
     * Properties of entity Template.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Local_path = new Property(3, String.class, "local_path", false, "LOCAL_PATH");
        public final static Property Version_code = new Property(4, Integer.class, "version_code", false, "VERSION_CODE");
        public final static Property Reserved = new Property(5, String.class, "reserved", false, "RESERVED");
    }


    public TemplateDao(DaoConfig config) {
        super(config);
    }
    
    public TemplateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"template\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL UNIQUE ," + // 1: name
                "\"URL\" TEXT NOT NULL ," + // 2: url
                "\"LOCAL_PATH\" TEXT," + // 3: local_path
                "\"VERSION_CODE\" INTEGER," + // 4: version_code
                "\"RESERVED\" TEXT);"); // 5: reserved
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_template__id ON \"template\"" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_template_NAME ON \"template\"" +
                " (\"NAME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"template\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Template entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getUrl());
 
        String local_path = entity.getLocal_path();
        if (local_path != null) {
            stmt.bindString(4, local_path);
        }
 
        Integer version_code = entity.getVersion_code();
        if (version_code != null) {
            stmt.bindLong(5, version_code);
        }
 
        String reserved = entity.getReserved();
        if (reserved != null) {
            stmt.bindString(6, reserved);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Template entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getUrl());
 
        String local_path = entity.getLocal_path();
        if (local_path != null) {
            stmt.bindString(4, local_path);
        }
 
        Integer version_code = entity.getVersion_code();
        if (version_code != null) {
            stmt.bindLong(5, version_code);
        }
 
        String reserved = entity.getReserved();
        if (reserved != null) {
            stmt.bindString(6, reserved);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Template readEntity(Cursor cursor, int offset) {
        Template entity = new Template( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // local_path
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // version_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // reserved
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Template entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setUrl(cursor.getString(offset + 2));
        entity.setLocal_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersion_code(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setReserved(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Template entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Template entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Template entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
